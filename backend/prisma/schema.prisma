generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institute {
  id             String         @id @default(uuid())
  name           String         @unique
  email          String         @unique
  password       String
  
  departments     Department[]  
  academicBlocks  AcademicBlock[]
  rooms           Room[]
  courses         Course[]
  electiveBaskets ElectiveBasket[]
  faculties       Faculty[]
  schedules       Schedule[]
  studentGroups   StudentGroup[]
}

model Department {
  id           String       @id @default(uuid())
  name         String
  code         String
  instituteId  String

  faculties    Faculty[]
  courses      Course[]
  StudentGroups     StudentGroup[]
  electiveBaskets   ElectiveBasket[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

enum FacultyRank {
  PROFESSOR
  ASSOCIATE_PROFESSOR
  ASSISTANT_PROFESSOR
}

model Faculty {
  id           String       @id @default(uuid())
  name         String
  email        String
  rank         FacultyRank
  departmentId String
  instituteId  String

  availability FacultyAvailability[]
  classes Class[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department   Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model FacultyAvailability {
  id String @id @default(uuid())
  facultyId String
  scheduleId String
  availability Int[]

  faculty Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  schedule Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  @@unique([scheduleId, facultyId])
}

model Course {
  id           String       @id @default(uuid())
  name         String
  credits      Int
  departmentId String
  courseType   CourseType @default(THEORY)
  code         String
  electiveBasketId String? 
  instituteId String
  classes      Class[]
  department   Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  electiveBasket ElectiveBasket? @relation(fields: [electiveBasketId], references: [id], onDelete: Cascade)
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  
  @@unique([code, departmentId])
}

model ElectiveBasket {
  id String @id @default(uuid())
  name String 
  code String
  courseCount Int
  credits Int
  courseType   CourseType @default(THEORY)
  courses Course[]
  classes Class[]
  departmentId String
  instituteId String
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department   Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  @@unique([name, code,  departmentId])
}

model AcademicBlock {
  id           String       @id @default(uuid())
  name         String?
  blockCode    String       @unique
  instituteId  String

  rooms        Room[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

model Room {
  id            String        @id @default(uuid())
  floor         String
  name          String?       
  code          String
  blockId       String
  instituteId   String
  capacity      Int           @default(0)
  isLab         Boolean
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  academicBlock AcademicBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  classes       Class[]
}

model Schedule {
  id  String @id @default(uuid())
  name String
  days Int @default(1)
  slots Int @default(1)
  instituteId String


  rooms Room[]
  classes Class[]
  studentGroups StudentGroup[]
  facultyAvailability FacultyAvailability[]
  studentGroupAvailability StudentGroupAvailability[]
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
}

model StudentGroup {
  id String @id @default(uuid())
  name String
  departmentId String 
  batchCount Int
  passingYear Int
  section String
  batches Batch[]
  classes Class[]
  schedules Schedule[]
  availability StudentGroupAvailability[]
  headCount Int @default(0)

  instituteId  String
  institute    Institute    @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model StudentGroupAvailability {
  id String  @id @default(uuid())
  studentGroupId String
  scheduleId String
  availability Int[]

  studentGroup StudentGroup    @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
  schedule Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  @@unique([scheduleId, studentGroupId])
  

}

model Batch {
  id String @id @default(uuid())
  name String
  studentGroupId String
  classes Class[]
  headCount Int @default(0)
  StudentGroup StudentGroup @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
}

model Class {
  id String @id @default(uuid())
  facultyId String
  studentGroupId String
  courseId String

  courseType CourseType @default(THEORY)
  roomId String
  scheduleId String
  electiveBasketId String?

  batches Batch[]

  concurrentClasses  Class[]   @relation("ConcurrentClasses")
  concurrentByClasses Class[]  @relation("ConcurrentClasses")

  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  StudentGroup StudentGroup @relation(fields: [studentGroupId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  electiveBasket ElectiveBasket? @relation(fields: [electiveBasketId], references: [id], onDelete: Cascade)
}

enum CourseType {
  THEORY
  PRACTICAL
}

